{"version":3,"sources":["use-hover.ts","arabic/NumberChangeButton.tsx","arabic/TextNumberInput.tsx","types.ts","arabic/PositionName.tsx","arabic/ArabicNumberInput.tsx","cistercian/CistercianDigit.tsx","cistercian/CistercianDigitPositioned.tsx","cistercian/CistercianNumber.tsx","useQueryString.ts","App.tsx","index.tsx"],"names":["noop","useMouseHoverHandlers","onHover","useMemo","undefined","onMouseOver","onMouseOut","useHoverTracker","useState","currentHoverValue","setCurrentHoverValue","onHoverFactory","memoize","hoverValue","isHover","updateHover","NumberChangeButton","number","change","minNumber","maxNumber","onChangeNumber","children","mouseEventHandlers","focusEventHandlers","onFocus","onBlur","afterChange","active","className","disabled","onClick","e","TextNumberInput","value","onChange","maxLength","toString","textNumber","setTextNumber","isEditing","setIsEditing","textNumberValue","parseInt","useEffect","isNaN","type","pattern","inputMode","newVal","target","replaceAll","preventDefault","replace","ALL_DIGIT_POSITIONS","DIGIT_POSITION_BASE","Object","fromEntries","map","p","i","Math","pow","PositionName","position","highlight","ArabicNumberInput","onPositionHover","highlightedPosition","btnProps","useCallback","delta","maxDeviceWidth","SCREEN_WIDTH_BREAK","slice","reverse","pos","minDeviceWidth","min","max","step","baseFragments","digitFragments","0","1","2","3","4","5","6","7","8","9","CistercianDigit","digit","mouseHoverHandlers","activeFragments","Error","isOn","lookup","assign","f","getActiveFragmentsLookup","x1","y1","x2","y2","x","y","width","height","fillOpacity","stroke","CistercianDigitPositioned","rest","scaleX","scaleY","viewBox","overflow","transform","transform-origin","CistercianNumber","React","num","padStart","split","n","getDigits","thousands","hundreds","tens","ones","xmlns","strokeLinecap","setQueryStringWithoutPageReload","qsValue","newurl","window","location","protocol","host","pathname","history","replaceState","path","useQueryString","key","initialValue","fromString","queryValue","queryString","search","qs","parse","ignoreQueryPrefix","parseArrays","getQueryStringValue","parsedQueryValue","setValue","queryStringCallback","useThrottleCallback","values","newQsValue","stringify","setQueryStringValue","App","positionHighlight","Date","getFullYear","setNumber","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ac27c54.chunk.js","sourcesContent":["import memoize from \"fast-memoize\";\nimport { useMemo, useState } from \"react\";\n\nfunction noop() {}\n\nexport function useMouseHoverHandlers(onHover?: (isHover: boolean) => void) {\n    return useMemo(\n        () => onHover !== undefined ? {\n            onMouseOver: () => onHover(true),\n            onMouseOut: () => onHover(false)\n        } : {\n            onMouseOver: noop,\n            onMouseOut: noop\n        },\n        [onHover]\n    );\n}\n\nexport function useHoverTracker<T>() {\n    const [currentHoverValue, setCurrentHoverValue] = useState<T | undefined>(undefined);\n\n    const updateHover = (hoverValue: T, isHover: boolean) => {\n        if(hoverValue !== currentHoverValue) {\n            if(isHover) {\n                setCurrentHoverValue(hoverValue);\n            }\n        } else if(!isHover) {\n            setCurrentHoverValue(undefined);\n        }\n    };\n\n    const onHoverFactory: HoverUpdate<T> = memoize(\n        (hoverValue: T) => (isHover: boolean) => updateHover(hoverValue, isHover)\n    );\n\n    return [currentHoverValue, onHoverFactory, setCurrentHoverValue] as const;\n}\n\nexport type HoverUpdate<T> = (value: T) => (isHover: boolean) => void;","import React from 'react'\nimport { useMouseHoverHandlers } from '../use-hover';\n\nimport './NumberChangeButton.css';\n\ninterface NumberChangeButtonProps {\n    number: number;\n    change: number;\n    minNumber: number;\n    maxNumber: number;\n    onChangeNumber: (delta: number) => void;\n    onHover: (isHover: boolean) => void;\n}\nexport const NumberChangeButton: React.FC<NumberChangeButtonProps> = ({\n    number,\n    change,\n    minNumber,\n    maxNumber,\n    onChangeNumber,\n    onHover,\n    children\n}) => {\n    const mouseEventHandlers = useMouseHoverHandlers(onHover);\n    \n    const { onMouseOver: onFocus, onMouseOut: onBlur} = mouseEventHandlers;\n    const focusEventHandlers = {onFocus, onBlur};\n\n    const afterChange = number + change;\n    const active = afterChange >= minNumber && afterChange <= maxNumber;\n\n    return <button\n        className={`number-btn`}\n        disabled={!active}\n        onClick={e => onChangeNumber(change)}\n        {...mouseEventHandlers}\n        {...focusEventHandlers}\n    >\n        <div className=\"number-btn-change\">{(change>0 ? \"+\" : \"\") + change}</div>\n        {children}\n    </button>;\n}","import React, { useEffect, useMemo, useState } from 'react';\n\ninterface TextNumberInputProps {\n    value: number;\n    onChange: (val: number) => void;\n    \n    className?: string;\n    maxLength?: number;\n}\n\nfunction trimZeros(val: string) {\n    return val.replace(/^(0+)(?=\\d+)/, '');\n}\n\nexport const TextNumberInput: React.FC<TextNumberInputProps> = ({\n    value,\n    onChange,\n\n    className,\n    maxLength\n}) => {\n    const [textNumber, setTextNumber] = useState(value.toString());\n    const [isEditing, setIsEditing] = useState(false);\n\n    const textNumberValue = useMemo(() => parseInt(textNumber, 10), [textNumber]);\n\n    useEffect(() => {\n        if(textNumberValue !== value) {\n            if(isEditing) {\n                if(!isNaN(textNumberValue)) {\n                    onChange(textNumberValue);\n                }\n            } else {\n                setTextNumber(value.toString());\n            }\n        }\n    }, [textNumberValue, value, onChange, isEditing]);\n\n    return (\n        <input\n            className={className}\n            type=\"text\"\n\n            pattern=\"[0-9]*\"\n            inputMode=\"numeric\"\n            maxLength={maxLength}\n\n            value={textNumber}\n            onChange={e => {\n                const newVal = e.target.value.replaceAll(/[^0-9]/g, '');\n                if(newVal !== textNumber) {\n                    setTextNumber(newVal);\n                } else {\n                    e.preventDefault();\n                }\n            }}\n            onFocus={() => setIsEditing(true)}\n            onBlur={() => {\n                setIsEditing(false);\n                setTextNumber(trimZeros(textNumber));\n            }}\n        />\n    );\n};","export type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\n\nexport const ALL_DIGIT_POSITIONS = ['ones', 'tens', 'hundreds', 'thousands'] as const;\n\nexport type DigitPosition = typeof ALL_DIGIT_POSITIONS[number];\n\nexport const DIGIT_POSITION_BASE: {[k in DigitPosition]: number} = Object.fromEntries(\n    ALL_DIGIT_POSITIONS.map((p, i) => [p, Math.pow(10, i)])\n) as {[k in DigitPosition]: number};","import React from 'react'\n\nimport { DigitPosition } from '../types';\nimport { useMouseHoverHandlers } from '../use-hover';\n\ninterface PositionNameProps {\n    position: DigitPosition;\n    highlight?: boolean;\n    onHover?: (isHover: boolean) => void;\n}\n\nexport const PositionName : React.FC<PositionNameProps> = ({\n    position,\n    highlight = false,\n    onHover\n}) => {\n    const mouseEventHandlers = useMouseHoverHandlers(onHover);\n    \n    return (\n        <div className={`position-name ${highlight ? 'highlighted': ''}`} {...mouseEventHandlers} >\n            {position}\n        </div>\n    );\n};","import React, { useCallback } from 'react'\nimport MediaQuery from 'react-responsive';\n\nimport { NumberChangeButton } from './NumberChangeButton';\nimport { TextNumberInput } from './TextNumberInput';\nimport { ALL_DIGIT_POSITIONS, DigitPosition, DIGIT_POSITION_BASE } from '../types';\n\nimport './ArabicNumberInput.css';\nimport { HoverUpdate } from '../use-hover';\nimport { PositionName } from './PositionName';\n\ninterface ArabicNumberInputProps {\n    value: number;\n    onChange: (val: number) => void;\n    onPositionHover: HoverUpdate<DigitPosition>;\n    highlightedPosition: DigitPosition | undefined;\n    minNumber: number;\n    maxNumber: number;\n}\n\nconst SCREEN_WIDTH_BREAK = 1300;\n\nexport const ArabicNumberInput: React.FC<ArabicNumberInputProps> = ({\n    value,\n    onChange,\n    onPositionHover,\n    highlightedPosition,\n    minNumber,\n    maxNumber\n}) => {\n    const handleNumberChange = useCallback(delta => onChange(value+delta), [onChange, value]);\n\n    const btnProps = {\n        minNumber: minNumber,\n        maxNumber: maxNumber,\n        onChangeNumber: handleNumberChange\n    };\n\n    return (\n        <div>\n            <MediaQuery maxDeviceWidth={SCREEN_WIDTH_BREAK - 1}>\n                <div className='small'>\n                    <TextNumberInput\n                        className=\"year-text-input\"\n                        value={value}\n                        onChange={onChange}\n                        maxLength={4}\n                    />\n                    <div className=\"input-section position-column-list\">\n                    {\n                        ALL_DIGIT_POSITIONS.slice(0).reverse().map(pos => (\n                            <div key={`pos=${pos}`} className=\"position-column\">\n                                <NumberChangeButton \n                                    number={value}\n                                    change={DIGIT_POSITION_BASE[pos]}\n                                    onHover={onPositionHover(pos)}\n                                    {...btnProps}\n                                />\n                                <PositionName position={pos} highlight={highlightedPosition === pos} onHover={onPositionHover(pos)} />\n                                <NumberChangeButton\n                                    number={value}\n                                    change={-DIGIT_POSITION_BASE[pos]}\n                                    onHover={onPositionHover(pos)}\n                                    {...btnProps}\n                                />\n                            </div>\n                        ))\n                    }\n                    </div>\n                </div>\n            </MediaQuery>\n            <MediaQuery minDeviceWidth={SCREEN_WIDTH_BREAK}>\n                <div className=\"input-section large\">\n                    <span className=\"negative-change\">\n                    {\n                        ALL_DIGIT_POSITIONS.slice(0).reverse().map(pos => (\n                            <NumberChangeButton key={`btn-${pos}`} \n                                number={value}\n                                change={-DIGIT_POSITION_BASE[pos]}\n                                onHover={onPositionHover(pos)}\n                                {...btnProps}\n                            >\n                                <PositionName position={pos} highlight={highlightedPosition === pos} />\n                            </NumberChangeButton>\n                        ))\n                    }\n                    </span>\n                    <TextNumberInput\n                        className=\"year-text-input\"\n                        value={value}\n                        onChange={onChange}\n                        maxLength={4}\n                    />\n                    <span className=\"positive-change\">\n                    {\n                            ALL_DIGIT_POSITIONS.map(pos => (\n                                <NumberChangeButton key={`btn-${pos}`} \n                                    number={value}\n                                    change={DIGIT_POSITION_BASE[pos]}\n                                    onHover={onPositionHover(pos)}\n                                    {...btnProps}\n                                >\n                                    <PositionName position={pos} highlight={highlightedPosition === pos} />\n                                </NumberChangeButton>\n                            ))\n                        }\n                    </span>\n                </div>\n            </MediaQuery>\n\n            <div className=\"input-section slider-container\">\n                <span className=\"slider-label\">{minNumber}</span>\n                <input\n                    className=\"slider-input\"\n                    type=\"range\"\n                    min={minNumber} max={maxNumber} step={1} value={value} onChange={e => onChange(parseInt(e.target.value))} />\n                <span className=\"slider-label\">{maxNumber}</span>\n            </div>\n        </div>\n    );\n};","import React, { useMemo } from 'react';\nimport { Digit } from '../types';\nimport { useMouseHoverHandlers } from '../use-hover';\n\nexport interface CistercianDigitProps {\n    digit: Digit;\n    highlight?: boolean;\n    onHover?: (isHover: boolean) => void;\n}\n\nconst baseFragments = [1, 2, 3, 4, 6] as const;\ntype BaseFragment = typeof baseFragments[number];\n\nconst digitFragments: {[K in Digit]: BaseFragment[] } = {\n    0: [],\n    1: [1],\n    2: [2],\n    3: [3],\n    4: [4],\n    5: [1, 4],\n    6: [6],\n    7: [1, 6],\n    8: [2, 6],\n    9: [1, 2, 6]\n};\n\nfunction getActiveFragmentsLookup(activeFragments: Digit[]) {\n    const lookup = Object.assign({}, ...baseFragments.map(f => ({[f]: false})));\n    for (let af of activeFragments) {\n        lookup[af] = true;\n    }\n\n    return lookup;\n}\n\nexport const CistercianDigit: React.FC<CistercianDigitProps> = ({\n    digit,\n    highlight = false,\n    onHover\n}) => {\n    const mouseHoverHandlers = useMouseHoverHandlers(onHover);\n\n    const activeFragments = digitFragments[digit];\n\n    if(activeFragments === undefined) {\n        throw new Error('A cistercian digit can only be generated for Arabic digits 0-9');\n    }\n\n    const isOn = useMemo(\n        () => getActiveFragmentsLookup(activeFragments),\n        [activeFragments]\n    );\n\n    return <g className={`cistercian-glyph ${highlight ? \"highlighted\" : \"\"}`}  {...mouseHoverHandlers}>\n        {isOn[1] && <line key=\"frag-1\" x1=\"0\" y1=\"0\" x2={100} y2=\"0\" />}\n        {isOn[2] && <line key=\"frag-2\" x1=\"0\" y1=\"100\" x2=\"100\" y2=\"100\" />}\n        {isOn[3] && <line key=\"frag-3\" x1=\"0\" y1=\"0\" x2=\"100\" y2=\"100\" />}\n        {isOn[4] && <line key=\"frag-4\" x1=\"0\" y1=\"100\" x2=\"100\" y2=\"0\" />}\n        {isOn[6] && <line key=\"frag-6\" x1=\"100\" y1=\"0\" x2=\"100\" y2=\"100\" />}\n        <rect x={0} y={0} width={100} height={100} fillOpacity={0} stroke=\"none\" />\n    </g>;\n}","import * as React from 'react';\nimport { DigitPosition } from '../types';\nimport { CistercianDigit, CistercianDigitProps } from './CistercianDigit';\n\n\ninterface CistercianDigitPositionedProps extends CistercianDigitProps {\n    position: DigitPosition;\n}\n\nexport const CistercianDigitPositioned: React.FC<CistercianDigitPositionedProps> = ({\n    position,\n    ...rest\n}) => {\n    const scaleX = (position === 'ones' || position === 'hundreds') ? 1 : -1;\n    const scaleY = (position === 'tens' || position === 'ones')  ? 1 : -1;\n\n    return (\n        <svg width={100} height={100} viewBox=\"0 0 100 100\" overflow=\"visible\" >\n            <g transform={`scale(${scaleX}, ${scaleY})`} transform-origin=\"center\" >\n                <CistercianDigit {...rest}/>\n            </g>\n        </svg>\n    );\n};","import * as React from 'react';\nimport { Digit, DigitPosition } from '../types';\nimport { HoverUpdate } from '../use-hover';\nimport { CistercianDigitPositioned } from './CistercianDigitPositioned';\n\nimport './CistercianNumber.css';\n\ninterface CistercianNumberProps {\n    number: number;\n    highlightedPosition?: DigitPosition;\n\n    onPositionHover: HoverUpdate<DigitPosition>;\n}\n\nfunction getDigits(num: number): Digit[] {\n    if (num < 0 || num > 9999) {\n        throw new Error('A Cistercian number can only be shown for integers from 0 to 9999');\n    }\n\n    return num.toString().padStart(4, '0').split('').map(n => parseInt(n, 10)) as Digit[];\n}\n\nexport const CistercianNumber: React.FC<CistercianNumberProps> = ({\n    number,\n    highlightedPosition,\n    onPositionHover\n}) => {\n    const [thousands, hundreds, tens, ones] = React.useMemo(() => getDigits(number), [number]);\n\n    return <svg className=\"cistercian-number\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 340\">\n        <g transform=\"translate(20,20)\">\n            <g key=\"group-ones\" transform=\"translate(100,0)\" >\n                <CistercianDigitPositioned\n                    digit={ones} position='ones'\n                    highlight={highlightedPosition === 'ones'}\n                    onHover={onPositionHover('ones')}\n                />\n            </g>\n            <g key=\"group-tens\"transform=\"translate(0,0)\" >\n                <CistercianDigitPositioned\n                    digit={tens} position='tens'\n                    highlight={highlightedPosition === 'tens'}\n                    onHover={onPositionHover('tens')}\n                />\n            </g>\n            <g key=\"group-thousands\"transform=\"translate(0, 200)\" >\n                <CistercianDigitPositioned\n                    digit={thousands} position='thousands'\n                    highlight={highlightedPosition === 'thousands'}\n                    onHover={onPositionHover('thousands')}\n                />\n            </g>\n            <g key=\"group-hundreds\"transform=\"translate(100, 200)\" >\n                <CistercianDigitPositioned\n                    digit={hundreds} position='hundreds'\n                    highlight={highlightedPosition === 'hundreds'}\n                    onHover={onPositionHover('hundreds')}\n                />\n            </g>\n            <line x1=\"100\" y1=\"0\" x2=\"100\" y2=\"300\" strokeLinecap=\"square\"/>\n        </g>\n    </svg>;\n}","// adapted from https://medium.com/swlh/using-react-hooks-to-sync-your-component-state-with-the-url-query-string-81ccdfcb174f\n\nimport { useState, useEffect } from \"react\";\nimport qs from \"qs\";\nimport { useThrottleCallback } from \"@react-hook/throttle\";\n\nconst setQueryStringWithoutPageReload = (qsValue: string) => { \n    const newurl = window.location.protocol + \"//\" +\n                   window.location.host + \n                   window.location.pathname + \n                   qsValue;\n \n    window.history.replaceState({ path: newurl }, \"\", newurl);\n};\n\nconst setQueryStringValue = ( \n    key: string, \n    value: string, \n    queryString = window.location.search\n ) => { \n     const values = qs.parse(queryString, { ignoreQueryPrefix: true, parseArrays: false}); \n     const newQsValue = qs.stringify({ ...values, [key]: value }); \n     setQueryStringWithoutPageReload(`?${newQsValue}`);\n };\n\nconst getQueryStringValue = ( \n    key: string,\n    queryString = window.location.search\n) => {\n    const values = qs.parse(queryString, {\n      ignoreQueryPrefix: true,\n      parseArrays: false\n    });\n    return values[key] as string;\n};\n\nexport function useQueryString<T>(\n  key: string,\n  initialValue: T,\n  fromString: (x: string) => T,\n  toString: (x: T) => string\n) : [T, (a: T) => void] {\n  const queryValue = getQueryStringValue(key);\n  const parsedQueryValue = (queryValue ?? \"\") === \"\" ? undefined : fromString(queryValue);\n  const [value, setValue] = useState(parsedQueryValue ?? initialValue);\n  \n  const queryStringCallback = useThrottleCallback((key, value) => {\n    setQueryStringValue(key, toString(value));\n  }, 1);\n\n  useEffect(() => {\n    queryStringCallback(key, value);\n  }, [key, value, queryStringCallback]);\n\n  return [value, setValue];\n};\n","import React from 'react';\nimport './App.css';\nimport { ArabicNumberInput } from './arabic/ArabicNumberInput';\nimport { CistercianNumber } from './cistercian/CistercianNumber';\nimport { DigitPosition } from './types';\nimport { useHoverTracker } from './use-hover';\nimport { useQueryString } from './useQueryString';\n\n\nfunction App() {\n  const [positionHighlight, onPositionHover] = useHoverTracker<DigitPosition>();\n  const [number, setNumber] = useQueryString('year', (new Date()).getFullYear(), x => parseInt(x, 10), x => x.toString());\n\n  return (\n    <div className=\"App\">\n      <h1>\n      Cistercian numbers\n      </h1>\n      \n      <section className=\"number-section cistercian\">\n        <CistercianNumber\n          number={number}\n          highlightedPosition={positionHighlight}\n          onPositionHover={onPositionHover}\n        />\n      </section>\n\n      <section className=\"number-section decimal\">\n        <ArabicNumberInput\n          value={number}\n          minNumber={0}\n          maxNumber={9999}\n          \n          onChange={setNumber}\n          highlightedPosition={positionHighlight}\n          onPositionHover={onPositionHover} \n        />\n      </section>\n\n      <section className=\"description\">\n        <p >\n          Experiment with a medieval numbering system invented by Cistercian monks!\n        </p>\n        <p>\n          (copy the website URL to share a link to the selected number)\n        </p>\n      </section>\n\n      <section className=\"colophon\">\n        <p>\n          Created by <a href=\"https://mz8i.com\">mz8i</a> (<a href=\"https://github.com/mz8i/cistercian\">source</a>). \n        </p>\n        <p>\n        Inspired by <a href=\"https://twitter.com/MathematicsUCL/status/1356558846093914114/photo/1\">UCL Mathematics</a> on Twitter.\n        </p>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}